<?php
// src/Controller/ProfileController.php
/**
 * This template manages all the profile customization
 */
namespace App\Controller;

use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\String\Slugger\SluggerInterface;
use Symfony\Component\HttpFoundation\Request;
use App\Form\ProfileFormType;

class ProfileController extends AbstractController
{
    /* autogenerated by Symfony (and not used, but left here as a proof)*/
    public function index(): Response
    {
        // usually you'll want to make sure the user is authenticated first,
        // see "Authorization" below
        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');

        // returns your User object, or null if the user is not authenticated
        // use inline documentation to tell your editor your exact User class
        /** @var \App\Entity\User $user */
        $user = $this->getUser();

        // Call whatever methods you've added to your User class
        // For example, if you added a getFirstName() method, you can use that.
        return new Response('Well hi there ' . $user->getName());
    }

    /**
     * Function which permits the customization of the profile
     */
    #[Route('/profile', name: 'profile')]
    public function customizeProfile(Request $request, ManagerRegistry $doctrine, SluggerInterface $slugger): Response
    {
        $entityManager = $doctrine->getManager();

        //we get the current user, we create a Symfony form and get the requests from it
        /** 
         * @var \App\Entity\User $user
         */
        $user = $this->getUser();
        $form = $this->createForm(ProfileFormType::class, $user);
        $form->handleRequest($request);

        //if the form is submitted and valid we can customize the profile
        if ($form->isSubmitted() && $form->isValid()) {
            //we get the profile picture and, thanks to the webpack we installed, we can store the pictures in the uploads file 
            $pfp = $form->get('pfp')->getData();
            //if the pfp exists we manage it
            if ($pfp) {
                $originalFilename = pathinfo($pfp->getClientOriginalName(), PATHINFO_FILENAME);
                // this is needed to safely include the file name as part of the URL
                $safeFilename = $slugger->slug($originalFilename);
                $newFilename = $safeFilename . '-' . uniqid() . '.' . $pfp->guessExtension();
                //we try to move the file to uploads
                try {
                    $pfp->move(
                        $this->getParameter('uploads'),
                        $newFilename
                    );
                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                    echo ("Could not upload file");
                }

                // we update the 'pfp' property to store the image file name
                $user->setPfp($newFilename);
            }
                
            //now we get the data from the rest of the fields of the form (username and telephone)
            $username = $form->get('username')->getData();
            $telephone = $form->get('telephone')->getData();

            //then we set that new info
            $user->setUsername($username);
            $user->setTelephone($telephone);

            //finally we update the database
            $entityManager->persist($user);
            $entityManager->flush();
    
            //we are redirected to the same page to refresh it and see the changes
            return $this->redirectToRoute('profile');
        }

        return $this->render('profile/profile.html.twig', [
            'profileForm' => $form->createView(),
            'userPfp' => $user->getPfp()
        ]);
    }
}
